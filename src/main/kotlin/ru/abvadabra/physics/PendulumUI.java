package ru.abvadabra.physics;

import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.function.Consumer;

public class PendulumUI extends JFrame {
    public JPanel root;
    public JButton startSimulationButton;
    public JPanel controlsPane;
    public JSlider lengthSlider;
    public JTextField lengthField;
    public JSlider initialAngleSlider;
    public JTextField initialAngleField;
    public JSlider initialAngularVelocitySlider;
    public JTextField initialAngularVelocityField;
    public JSlider forcingAmplitudeSlider;
    public JTextField forcingAmplitudeField;
    public JSlider forcingFrequencySlider;
    public JTextField forcingFrequencyField;
    public JTabbedPane tabbedPane1;
    public PendulumRenderer pendulumRenderer;

    public PendulumUI(String title) throws HeadlessException {
        super(title);
        setContentPane(root);
    }


    void setup(PendulumSimulationContext context) {
        pendulumRenderer.context = context;
        startSimulationButton.addActionListener(new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (context.isSumulating()) {
                    context.stopSimulation();
                    startSimulationButton.setText("Запустить симуляцию");
                } else {
                    context.startSimulation();
                    startSimulationButton.setText("Остановить симуляцию");
                }
            }
        });
        bindSliderAndField(lengthSlider, lengthField, context.getArmLength(), 0F, 3F,
                context::setArmLength);
        bindSliderAndField(initialAngleSlider, initialAngleField, context.getInitialAngle(), 0F, 2.0 * Math.PI,
                context::setInitialAngle);
        bindSliderAndField(initialAngularVelocitySlider, initialAngularVelocityField, context.getInitialAngularVelocity(), 0F, 3F,
                context::setInitialAngularVelocity);
        bindSliderAndField(forcingAmplitudeSlider, forcingAmplitudeField, context.getForcingAmplitude(), 0F, 3F,
                context::setForcingAmplitude);
        bindSliderAndField(forcingFrequencySlider, forcingFrequencyField, context.getForcingFreq() / (2.0 * Math.PI), 0F, 20,
                context::setForcingFreq);
    }


    private void bindSliderAndField(JSlider slider, JTextField field, double initial, double min, double max, Consumer<Double> valueConsumer) {
        slider.setMinimum((int) (min * 100));
        slider.setMaximum((int) (max * 100));
        slider.setValue((int) (initial * 100));
        slider.addChangeListener(e -> {
            try {
                double val = slider.getValue() / 100.0;
                field.setText(String.valueOf(val));
                valueConsumer.accept(val);
                System.out.println(val);
                pendulumRenderer.update();
                if (pendulumRenderer.context.isSumulating())
                    pendulumRenderer.context.restart();
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
        field.addActionListener(e -> {
            double val = Double.parseDouble(field.getText());
            slider.setValue((int) (100 * val));
            valueConsumer.accept(val);
            pendulumRenderer.update();
            if (pendulumRenderer.context.isSumulating())
                pendulumRenderer.context.restart();
        });
        field.setText(String.valueOf(slider.getValue() / 100.0));
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        root = new JPanel();
        root.setLayout(new BorderLayout(0, 0));
        controlsPane = new JPanel();
        controlsPane.setLayout(new BorderLayout(0, 0));
        root.add(controlsPane, BorderLayout.SOUTH);
        controlsPane.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), null));
        startSimulationButton = new JButton();
        startSimulationButton.setText("Запустить симуляцию");
        controlsPane.add(startSimulationButton, BorderLayout.CENTER);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new BorderLayout(5, 0));
        controlsPane.add(panel1, BorderLayout.NORTH);
        lengthSlider = new JSlider();
        panel1.add(lengthSlider, BorderLayout.WEST);
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$(null, -1, -1, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setText("Длина маятника");
        panel1.add(label1, BorderLayout.EAST);
        lengthField = new JTextField();
        lengthField.setColumns(10);
        lengthField.setPreferredSize(new Dimension(116, 30));
        panel1.add(lengthField, BorderLayout.CENTER);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new BorderLayout(5, 0));
        panel1.add(panel2, BorderLayout.SOUTH);
        initialAngleSlider = new JSlider();
        panel2.add(initialAngleSlider, BorderLayout.WEST);
        initialAngleField = new JTextField();
        initialAngleField.setColumns(10);
        panel2.add(initialAngleField, BorderLayout.CENTER);
        final JLabel label2 = new JLabel();
        label2.setText("Начальный угол");
        panel2.add(label2, BorderLayout.EAST);
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new BorderLayout(5, 0));
        panel2.add(panel3, BorderLayout.SOUTH);
        initialAngularVelocitySlider = new JSlider();
        panel3.add(initialAngularVelocitySlider, BorderLayout.WEST);
        initialAngularVelocityField = new JTextField();
        panel3.add(initialAngularVelocityField, BorderLayout.CENTER);
        final JLabel label3 = new JLabel();
        label3.setText("Скорость поворота");
        panel3.add(label3, BorderLayout.EAST);
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new BorderLayout(5, 0));
        panel3.add(panel4, BorderLayout.SOUTH);
        forcingAmplitudeSlider = new JSlider();
        panel4.add(forcingAmplitudeSlider, BorderLayout.WEST);
        forcingAmplitudeField = new JTextField();
        panel4.add(forcingAmplitudeField, BorderLayout.CENTER);
        final JLabel label4 = new JLabel();
        label4.setText("Амплитуда колебаний");
        panel4.add(label4, BorderLayout.EAST);
        final JPanel panel5 = new JPanel();
        panel5.setLayout(new BorderLayout(5, 0));
        panel4.add(panel5, BorderLayout.SOUTH);
        forcingFrequencySlider = new JSlider();
        panel5.add(forcingFrequencySlider, BorderLayout.WEST);
        forcingFrequencyField = new JTextField();
        panel5.add(forcingFrequencyField, BorderLayout.CENTER);
        final JLabel label5 = new JLabel();
        label5.setText("Частота колебаний");
        panel5.add(label5, BorderLayout.EAST);
        tabbedPane1 = new JTabbedPane();
        root.add(tabbedPane1, BorderLayout.CENTER);
        final JPanel panel6 = new JPanel();
        panel6.setLayout(new BorderLayout(0, 0));
        tabbedPane1.addTab("Маятник", panel6);
        pendulumRenderer = new PendulumRenderer();
        panel6.add(pendulumRenderer, BorderLayout.CENTER);
        final JPanel panel7 = new JPanel();
        panel7.setLayout(new GridBagLayout());
        tabbedPane1.addTab("График", panel7);
        label1.setLabelFor(lengthField);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return root;
    }

}
